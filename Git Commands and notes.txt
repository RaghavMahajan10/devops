Git Commands and notes 

1: git config --global user.name "RaghavMahajan10" - it will set the GitHub user name in local git 

2: git config --global user.Email "rvm10091998@gmail.com" - it will set the GitHub email in local git

3: git config --list - it will all configs which we set or by default set

4: git init - create git repo in local machine 

5: git add . or git add file = it will add all or particular file in staging area(temp storage) from working dir

6: git commit -m "message in this" - it will store code in local repository

7: git branch -M <branch_name> - it will rename the local branch 

8: git remote add origin <git_repo_url> - it will set the repo to which code will pushed , fetched , pull

9: git push origin main - it will push code to remote repo

10: git push -u origin main - it will push code to remote repo and make sure next time if  just write git push it will push code to same branch u dont need to specifies origin main

11: git status - it will tell which file is added, modified, deleted etc

12: git restore filename - it will undo the changed , it will work on changes before code is committed

13: git restore --staged filename  - it will unstage the changes of the file present in stage 

14: git log - it will give list of commit we done so far with desecripton

15: git log --oneline - it will give list of commit we done so far with no description or single line info

16: git revert commit_id - it will revert the changes of that particular commit jiski tumne id di hai and yeh new commit banata hai

17: git reset --soft|mixed|hard Head~1 - it will revert the changes of last commit and yeh new commit nhi banata hai
a: soft - it will undo the commit and delete the commit and keep changes on stage 
b: mixed - it will undo the commit and delete the commit and keep changes on working dicrectory
C: hard - it will undo the commit and delete the commit and also remove changes from working dicrectory
Note: One commit is pushed we cannot delete it from there from local machine 


# Difference bw git revert and reset 
revert will create new commit with undoing the changes,when working with team use revert 
reset will not create new commit with undoing the changes, when working without team then we can use

18: Alias - creating alias open .gitconfig file from root directory (~) then add like below
[alias]
st = status
cmt = commit -m

or from command line 

git config --global alias.st status
git config --global alias.cmt commit -m

19: git branch <branch_name> - it will create new branch 

20: git checkout|switch <branch_name> - it will switch to branch

21: git checkout -b <branch_name> - it will create new branch and also switch to that branch

22: git switch -c <branch_name> - it will create new branch and also switch to that branch

23 git merge <branch_name_from_which_changes_need_to_pick> - it is used to merge the changed from one branch to other
branch to which branch u need to merge go to that branch and then write above command

24: git commit --amend -m "messages" - it will edit last commit instead of creating new commit
or just git commit --amend - it will open file

25: git clone <repo_url> - it will download the code from remote repo

26: git clone --branch <branch_name> <repo_url> - it will download specific branch

27: git fetch - it will download the changes but will not apply to working directory 

28: git pull - it will download and also apply changes to work directory 

29: how to deploy static website on git hub https://youtu.be/OFeJVNtBs8k?si=tQeph0lZ8kSl5O_Q
Steps Go to Settings > click on page > select branch > save

30: deploying react app on git hub - https://youtu.be/foMOj0uDkZ0?si=B2aOxIGXGLzinv6C

31: git diff - it will tell u what changes u made in file at work directory level, at stage level, at commit level and at remote level
a: git diff - work directory level
b: git diff --staged - stage level 
c: git diff origin/main  - branch level 
d: git commit commit_id_1 commit_id_2  - commit level

32: git commit -a -m "message" - this command will help to add changes to stage area 

33: git stash - it will remove the changes temporary , usecase when u need to change branch and dont
want to bring this branch change to other branch 
a: git stash apply - it will bring back the changes but it will not remove from stash memomry basically
it will copy stash changes 
b: git stash pop - it will bring back the changes and also remove it from stash memory 
c: git stash list - to check list of stash 
d: git stash clear - remove all stash from list or stash memory

34: Creating workflow in gihub :https://www.youtube.com/watch?v=TN0AUX4cn0Y&list=PL5OhSdfH4uDsyUM02ZHl2mOYBpihCYsml&index=26